package design.pattern.structural.decorator;

public class DecoratorPatternExample {
    public static void main(String[] args) {
        // Start with a simple coffee
        Coffee myCoffee = new SimpleCoffee();
        System.out.println(myCoffee.getDescription() + " -> â‚¹" + myCoffee.getCost());

        // Add Milk
        myCoffee = new MilkDecorator(myCoffee);
        System.out.println(myCoffee.getDescription() + " -> â‚¹" + myCoffee.getCost());

        // Add Whipped Cream
        myCoffee = new WhippedCreamDecorator(myCoffee);
        System.out.println(myCoffee.getDescription() + " -> â‚¹" + myCoffee.getCost());

    }
}

/*ðŸ¤” Why Use Decorator Pattern?
âœ… Adds new functionality dynamically â†’ No need to modify existing classes.
âœ… Follows Open/Closed Principle â†’ Existing classes remain unchanged, but we can extend their behavior.
âœ… Avoids subclass explosion â†’ Instead of creating multiple subclasses like MilkCoffee, SugarMilkCoffee, etc., we decorate the object at runtime.

ðŸ’¡ Simple Rule: If you want to dynamically add features to an object without modifying its original class, the Decorator Pattern is the best fit! ðŸš€
* */