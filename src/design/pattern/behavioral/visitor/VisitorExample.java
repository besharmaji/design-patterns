package design.pattern.behavioral.visitor;

public class VisitorExample {
    public static void main(String[] args) {
        Visitable book = new Book();
        Visitable fruit = new Fruit();

        Visitor taxCalculator = new TaxVisitor();

        book.accept(taxCalculator);
        fruit.accept(taxCalculator);
    }
}

/*ðŸ¤” Why Use Visitor Pattern?
âœ… Separates algorithms from the objects on which they operate â†’ You can add new operations without changing existing classes.
âœ… Follows Open/Closed Principle â†’ Add behavior without modifying existing structure.
âœ… Useful for object structures with many classes (e.g., AST, file system, document processors).
âœ… Makes operations like reporting, exporting, auditing easy to plug in.
âœ… Keeps your data model classes clean and focused only on data.
* */