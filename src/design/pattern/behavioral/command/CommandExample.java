package design.pattern.behavioral.command;

public class CommandExample {
    public static void main(String[] args) {
        // Receivers
        Light light = new Light();
        Fan fan = new Fan();

        // Commands
        Command lightOn = new LightOnCommand(light);
        Command fanOn = new FanOnCommand(fan);

        // Invoker
        RemoteControl remote = new RemoteControl();

        // Turn on light
        remote.setCommand(lightOn);
        remote.pressButton(); // Output: Light is ON

        // Turn on fan
        remote.setCommand(fanOn);
        remote.pressButton(); // Output: Fan is ON
    }
}

/*ðŸ¤” Why Use Command Pattern?
âœ… Decouples sender and receiver â†’ The invoker (like a remote) doesn't need to know the logic of the receiver (light/fan).
âœ… Easy to extend â†’ Add new commands (like ACOnCommand) without changing existing logic.
âœ… Enables undo/redo functionality â†’ Store command history and reverse actions if needed.
âœ… Supports logging and queuing â†’ You can log commands or execute them later (job queues, task schedulers).
âœ… Encourages single responsibility â†’ Each command class handles only one action.
* */
