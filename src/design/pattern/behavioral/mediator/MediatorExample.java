package design.pattern.behavioral.mediator;

public class MediatorExample {
    public static void main(String[] args) {
        ATCMediator atc = new ATCTower();

        Flight flight1 = new Airplane(atc, "Indigo-101");
        Flight flight2 = new Airplane(atc, "SpiceJet-202");

        flight1.getReady();
        flight1.land();

        flight2.getReady();
        flight2.land(); // Should wait

        // Once flight1 lands, ATC clears runway
        atc.setLandingStatus(true); // Simulate flight1 cleared the runway
        flight2.land(); // Now it can land
    }
}

/*ðŸ¤” Why Use Mediator Pattern?
âœ… Centralizes communication â†’ Components don't talk to each other directly, they talk via a mediator.
âœ… Reduces tight coupling â†’ Classes stay independent and reusable, making the system easier to maintain.
âœ… Simplifies complex object interaction â†’ Great for UI frameworks, chat rooms, air traffic control systems, etc.
âœ… Promotes Single Responsibility Principle â†’ Components focus on their own job, the mediator handles coordination.
âœ… Makes code more flexible â†’ You can change how components interact without touching the components themselves.
* */