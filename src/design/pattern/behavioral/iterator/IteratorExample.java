package design.pattern.behavioral.iterator;

public class IteratorExample {
    public static void main(String[] args) {
        MyBookCollection collection = new MyBookCollection();

        collection.addBook(new Book("Clean Code"));
        collection.addBook(new Book("Design Patterns"));
        collection.addBook(new Book("Effective Java"));

        BookIterator iterator = collection.iterator();

        while (iterator.hasNext()) {
            Book book = iterator.next();
            System.out.println("Book: " + book.getTitle());
        }
    }
}

/*ðŸ¤” Why Use Iterator Pattern?
âœ… Provides a uniform way to traverse different collections (lists, sets, trees) without exposing their internal structure.
âœ… Promotes clean separation of concerns â†’ Collection handles data storage, iterator handles traversal.
âœ… Supports multiple simultaneous traversals â†’ You can have multiple iterators over the same collection.
âœ… Makes custom data structures iterable â†’ You can design your own class and still loop over it using Iterator.
âœ… Enables flexibility â†’ You can change how the collection is stored internally without affecting iteration logic.
* */
