package design.pattern.creational.singleton;

public class SingletonBillPugh {
    private SingletonBillPugh() {}

    private static class Holder {
        private static final SingletonBillPugh INSTANCE = new SingletonBillPugh();
    }

    public static SingletonBillPugh getInstance() {
        return Holder.INSTANCE;
    }
}

/*ðŸ¤” Bill Pugh Singleton (Best & Recommended)
âœ… Uses static inner class to achieve lazy initialization without synchronization overhead.
âœ… Most efficient Singleton implementation.
âœ… Thread-Safe
âœ… Efficient & Lazy Initialization
* */


/*ðŸ¤” Why Use Singleton Pattern?
âœ… Ensures a Single Instance â†’ Prevents multiple objects from being created.
âœ… Saves Memory â†’ Especially useful for heavy objects like database connections.
âœ… Thread-Safe Implementations Available â†’ Prevents race conditions.
âœ… Global Access Point â†’ Provides a centralized way to access shared resources.
* */